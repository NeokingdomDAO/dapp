/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../../common";
import type {
  GovernanceTokenMock,
  GovernanceTokenMockInterface,
} from "../../../../contracts/mocks/NeokingdomTokenMock.sol/GovernanceTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceOfAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "mockResult",
        type: "uint256",
      },
    ],
    name: "mock_balanceOfAt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610115806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80634ee2cd7e1460415780636f07c25614607a5780639711715a1460a3575b600080fd5b6068604c36600460a9565b506001600160a01b031660009081526020819052604090205490565b60405190815260200160405180910390f35b60a1608536600460a9565b6001600160a01b03909116600090815260208190526040902055565b005b60006068565b6000806040838503121560bb57600080fd5b82356001600160a01b038116811460d157600080fd5b94602093909301359350505056fea2646970667358221220fa53cc34b8616b497cfd736c29f5b1d1b68c1e65e51c4b0499960a744b29d8b564736f6c63430008130033";

type GovernanceTokenMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: GovernanceTokenMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class GovernanceTokenMock__factory extends ContractFactory {
  constructor(...args: GovernanceTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<GovernanceTokenMock> {
    return super.deploy(overrides || {}) as Promise<GovernanceTokenMock>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GovernanceTokenMock {
    return super.attach(address) as GovernanceTokenMock;
  }
  override connect(signer: Signer): GovernanceTokenMock__factory {
    return super.connect(signer) as GovernanceTokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceTokenMockInterface {
    return new utils.Interface(_abi) as GovernanceTokenMockInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): GovernanceTokenMock {
    return new Contract(address, _abi, signerOrProvider) as GovernanceTokenMock;
  }
}
