/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface InternalMarketInterface extends utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "exchangeToken()": FunctionFragment;
    "getRoles()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "makeOffer(uint256)": FunctionFragment;
    "matchOffer(address,uint256)": FunctionFragment;
    "offerDuration()": FunctionFragment;
    "offeredBalanceOf(address)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redemptionController()": FunctionFragment;
    "reserve()": FunctionFragment;
    "setExchangePair(address,address)": FunctionFragment;
    "setInternalToken(address)": FunctionFragment;
    "setOfferDuration(uint256)": FunctionFragment;
    "setRedemptionController(address)": FunctionFragment;
    "setReserve(address)": FunctionFragment;
    "setRoles(address)": FunctionFragment;
    "setShareholderRegistry(address)": FunctionFragment;
    "tokenInternal()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawableBalanceOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "exchangeToken"
      | "getRoles"
      | "initialize"
      | "makeOffer"
      | "matchOffer"
      | "offerDuration"
      | "offeredBalanceOf"
      | "priceOracle"
      | "redeem"
      | "redemptionController"
      | "reserve"
      | "setExchangePair"
      | "setInternalToken"
      | "setOfferDuration"
      | "setRedemptionController"
      | "setReserve"
      | "setRoles"
      | "setShareholderRegistry"
      | "tokenInternal"
      | "withdraw"
      | "withdrawableBalanceOf",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deposit", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "exchangeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "makeOffer", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "matchOffer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "offerDuration", values?: undefined): string;
  encodeFunctionData(functionFragment: "offeredBalanceOf", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "priceOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "redemptionController", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setExchangePair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "setInternalToken", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setOfferDuration", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setRedemptionController", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setReserve", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setRoles", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setShareholderRegistry", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "tokenInternal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "withdrawableBalanceOf", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matchOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offeredBalanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redemptionController", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExchangePair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInternalToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOfferDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRedemptionController", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShareholderRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInternal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawableBalanceOf", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OfferCreated(uint128,address,uint256,uint256)": EventFragment;
    "OfferMatched(uint128,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMatched"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OfferCreatedEventObject {
  id: BigNumber;
  from: string;
  amount: BigNumber;
  expiredAt: BigNumber;
}
export type OfferCreatedEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber], OfferCreatedEventObject>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferMatchedEventObject {
  id: BigNumber;
  from: string;
  to: string;
  amount: BigNumber;
}
export type OfferMatchedEvent = TypedEvent<[BigNumber, string, string, BigNumber], OfferMatchedEventObject>;

export type OfferMatchedEventFilter = TypedEventFilter<OfferMatchedEvent>;

export interface InternalMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InternalMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exchangeToken(overrides?: CallOverrides): Promise<[string]>;

    getRoles(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      roles: PromiseOrValue<string>,
      tokenInternal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    makeOffer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    matchOffer(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    offerDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeredBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redemptionController(overrides?: CallOverrides): Promise<[string]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    setExchangePair(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInternalToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOfferDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRedemptionController(
      redemptionController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReserve(
      reserve_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tokenInternal(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawableBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exchangeToken(overrides?: CallOverrides): Promise<string>;

  getRoles(overrides?: CallOverrides): Promise<string>;

  initialize(
    roles: PromiseOrValue<string>,
    tokenInternal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  makeOffer(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  matchOffer(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

  offeredBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redemptionController(overrides?: CallOverrides): Promise<string>;

  reserve(overrides?: CallOverrides): Promise<string>;

  setExchangePair(
    token: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInternalToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOfferDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRedemptionController(
    redemptionController_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReserve(
    reserve_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoles(
    roles: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setShareholderRegistry(
    shareholderRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tokenInternal(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawableBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    exchangeToken(overrides?: CallOverrides): Promise<string>;

    getRoles(overrides?: CallOverrides): Promise<string>;

    initialize(
      roles: PromiseOrValue<string>,
      tokenInternal: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    makeOffer(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    matchOffer(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    offeredBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    redeem(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    redemptionController(overrides?: CallOverrides): Promise<string>;

    reserve(overrides?: CallOverrides): Promise<string>;

    setExchangePair(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setInternalToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOfferDuration(duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setRedemptionController(redemptionController_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setReserve(reserve_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoles(roles: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setShareholderRegistry(shareholderRegistry: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    tokenInternal(overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawableBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OfferCreated(uint128,address,uint256,uint256)"(
      id?: null,
      from?: null,
      amount?: null,
      expiredAt?: null,
    ): OfferCreatedEventFilter;
    OfferCreated(id?: null, from?: null, amount?: null, expiredAt?: null): OfferCreatedEventFilter;

    "OfferMatched(uint128,address,address,uint256)"(
      id?: null,
      from?: null,
      to?: null,
      amount?: null,
    ): OfferMatchedEventFilter;
    OfferMatched(id?: null, from?: null, to?: null, amount?: null): OfferMatchedEventFilter;
  };

  estimateGas: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exchangeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      roles: PromiseOrValue<string>,
      tokenInternal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    makeOffer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    matchOffer(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    offerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    offeredBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redemptionController(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    setExchangePair(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInternalToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOfferDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRedemptionController(
      redemptionController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReserve(
      reserve_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tokenInternal(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawableBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exchangeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      roles: PromiseOrValue<string>,
      tokenInternal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    makeOffer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    matchOffer(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    offerDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeredBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redemptionController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setExchangePair(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInternalToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOfferDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRedemptionController(
      redemptionController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReserve(
      reserve_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tokenInternal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawableBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
