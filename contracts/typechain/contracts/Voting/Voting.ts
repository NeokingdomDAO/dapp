/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface VotingInterface extends utils.Interface {
  functions: {
    "afterAddContributor(address)": FunctionFragment;
    "afterTokenTransfer(address,address,uint256)": FunctionFragment;
    "beforeRemoveContributor(address)": FunctionFragment;
    "canVote(address)": FunctionFragment;
    "canVoteAt(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateFrom(address,address)": FunctionFragment;
    "getCurrentSnapshotId()": FunctionFragment;
    "getDelegate(address)": FunctionFragment;
    "getDelegateAt(address,uint256)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "getTotalVotingPower()": FunctionFragment;
    "getTotalVotingPowerAt(uint256)": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
    "getVotingPowerAt(address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setRoles(address)": FunctionFragment;
    "setShareholderRegistry(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "snapshot()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterAddContributor"
      | "afterTokenTransfer"
      | "beforeRemoveContributor"
      | "canVote"
      | "canVoteAt"
      | "delegate"
      | "delegateFrom"
      | "getCurrentSnapshotId"
      | "getDelegate"
      | "getDelegateAt"
      | "getRoles"
      | "getTotalVotingPower"
      | "getTotalVotingPowerAt"
      | "getVotingPower"
      | "getVotingPowerAt"
      | "initialize"
      | "setRoles"
      | "setShareholderRegistry"
      | "setToken"
      | "snapshot",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "afterAddContributor", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "afterTokenTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "beforeRemoveContributor", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "canVote", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "canVoteAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "delegateFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "getCurrentSnapshotId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDelegate", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "getDelegateAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTotalVotingPower", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTotalVotingPowerAt", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getVotingPower", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setRoles", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setShareholderRegistry", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setToken", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;

  decodeFunctionResult(functionFragment: "afterAddContributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterTokenTransfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeRemoveContributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVoteAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegateFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCurrentSnapshotId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDelegateAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotalVotingPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotalVotingPowerAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotingPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotingPowerAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShareholderRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;

  events: {
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Snapshot(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Snapshot"): EventFragment;
}

export interface DelegateChangedEventObject {
  delegator: string;
  currentDelegate: string;
  newDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<[string, string, string], DelegateChangedEventObject>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  account: string;
  oldVotingPower: BigNumber;
  newVotingPower: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateVotesChangedEventObject>;

export type DelegateVotesChangedEventFilter = TypedEventFilter<DelegateVotesChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SnapshotEventObject {
  id: BigNumber;
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>;

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    canVote(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    canVoteAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    delegate(
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegateFrom(
      delegator: PromiseOrValue<string>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelegate(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoles(overrides?: CallOverrides): Promise<[string]>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalVotingPowerAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingPower(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    snapshot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  afterAddContributor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  afterTokenTransfer(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  beforeRemoveContributor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  canVote(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  canVoteAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  delegate(
    newDelegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegateFrom(
    delegator: PromiseOrValue<string>,
    newDelegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  getDelegate(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getDelegateAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoles(overrides?: CallOverrides): Promise<string>;

  getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalVotingPowerAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getVotingPower(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getVotingPowerAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialize(
    roles: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoles(
    roles: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setShareholderRegistry(
    shareholderRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  snapshot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    afterAddContributor(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    beforeRemoveContributor(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    canVote(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    canVoteAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    delegate(newDelegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    delegateFrom(
      delegator: PromiseOrValue<string>,
      newDelegate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegate(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoles(overrides?: CallOverrides): Promise<string>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalVotingPowerAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(roles: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoles(roles: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setShareholderRegistry(shareholderRegistry: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    snapshot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DelegateChanged(address,address,address)"(
      delegator?: PromiseOrValue<string> | null,
      currentDelegate?: null,
      newDelegate?: null,
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: PromiseOrValue<string> | null,
      currentDelegate?: null,
      newDelegate?: null,
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      oldVotingPower?: null,
      newVotingPower?: null,
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      account?: PromiseOrValue<string> | null,
      oldVotingPower?: null,
      newVotingPower?: null,
    ): DelegateVotesChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Snapshot(uint256)"(id?: null): SnapshotEventFilter;
    Snapshot(id?: null): SnapshotEventFilter;
  };

  estimateGas: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    canVote(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    canVoteAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    delegate(
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegateFrom(
      delegator: PromiseOrValue<string>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegate(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalVotingPowerAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPower(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    snapshot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    afterAddContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    afterTokenTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    beforeRemoveContributor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    canVote(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canVoteAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    delegate(
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegateFrom(
      delegator: PromiseOrValue<string>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegate(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegateAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalVotingPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalVotingPowerAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotingPower(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotingPowerAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    snapshot(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
