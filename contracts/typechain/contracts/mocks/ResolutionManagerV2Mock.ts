/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface ResolutionManagerV2MockInterface extends utils.Interface {
  functions: {
    "addResolutionType(string,uint256,uint256,uint256,bool)": FunctionFragment;
    "approveResolution(uint256)": FunctionFragment;
    "createResolution(string,uint256,bool,address[],bytes[])": FunctionFragment;
    "createResolutionWithExclusion(string,uint256,address[],bytes[],address)": FunctionFragment;
    "executeResolution(uint256)": FunctionFragment;
    "getExecutionDetails(uint256)": FunctionFragment;
    "getResolutionResult(uint256)": FunctionFragment;
    "getRoles()": FunctionFragment;
    "getVoterVote(uint256,address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "reinitialize()": FunctionFragment;
    "rejectResolution(uint256)": FunctionFragment;
    "resolutionTypes(uint256)": FunctionFragment;
    "resolutions(uint256)": FunctionFragment;
    "setGovernanceToken(address)": FunctionFragment;
    "setRoles(address)": FunctionFragment;
    "setShareholderRegistry(address)": FunctionFragment;
    "setVoting(address)": FunctionFragment;
    "updateResolution(uint256,string,uint256,bool,address[],bytes[])": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addResolutionType"
      | "approveResolution"
      | "createResolution"
      | "createResolutionWithExclusion"
      | "executeResolution"
      | "getExecutionDetails"
      | "getResolutionResult"
      | "getRoles"
      | "getVoterVote"
      | "initialize"
      | "reinitialize"
      | "rejectResolution"
      | "resolutionTypes"
      | "resolutions"
      | "setGovernanceToken"
      | "setRoles"
      | "setShareholderRegistry"
      | "setVoting"
      | "updateResolution"
      | "vote",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addResolutionType",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "approveResolution", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "createResolution",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createResolutionWithExclusion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "executeResolution", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getExecutionDetails", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getResolutionResult", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getRoles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVoterVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "reinitialize", values?: undefined): string;
  encodeFunctionData(functionFragment: "rejectResolution", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "resolutionTypes", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "resolutions", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setGovernanceToken", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setRoles", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setShareholderRegistry", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setVoting", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "updateResolution",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]): string;

  decodeFunctionResult(functionFragment: "addResolutionType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveResolution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createResolution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createResolutionWithExclusion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeResolution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getExecutionDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResolutionResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVoterVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinitialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectResolution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolutionTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolutions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGovernanceToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShareholderRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateResolution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "DelegateLostVotingPower(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ResolutionApproved(address,uint256)": EventFragment;
    "ResolutionCreated(address,uint256)": EventFragment;
    "ResolutionExecuted(address,uint256)": EventFragment;
    "ResolutionRejected(address,uint256)": EventFragment;
    "ResolutionTypeCreated(address,uint256)": EventFragment;
    "ResolutionUpdated(address,uint256)": EventFragment;
    "ResolutionVoted(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateLostVotingPower"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionTypeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionVoted"): EventFragment;
}

export interface DelegateLostVotingPowerEventObject {
  from: string;
  resolutionId: BigNumber;
  amount: BigNumber;
}
export type DelegateLostVotingPowerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateLostVotingPowerEventObject
>;

export type DelegateLostVotingPowerEventFilter = TypedEventFilter<DelegateLostVotingPowerEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ResolutionApprovedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionApprovedEvent = TypedEvent<[string, BigNumber], ResolutionApprovedEventObject>;

export type ResolutionApprovedEventFilter = TypedEventFilter<ResolutionApprovedEvent>;

export interface ResolutionCreatedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionCreatedEvent = TypedEvent<[string, BigNumber], ResolutionCreatedEventObject>;

export type ResolutionCreatedEventFilter = TypedEventFilter<ResolutionCreatedEvent>;

export interface ResolutionExecutedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionExecutedEvent = TypedEvent<[string, BigNumber], ResolutionExecutedEventObject>;

export type ResolutionExecutedEventFilter = TypedEventFilter<ResolutionExecutedEvent>;

export interface ResolutionRejectedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionRejectedEvent = TypedEvent<[string, BigNumber], ResolutionRejectedEventObject>;

export type ResolutionRejectedEventFilter = TypedEventFilter<ResolutionRejectedEvent>;

export interface ResolutionTypeCreatedEventObject {
  from: string;
  typeIndex: BigNumber;
}
export type ResolutionTypeCreatedEvent = TypedEvent<[string, BigNumber], ResolutionTypeCreatedEventObject>;

export type ResolutionTypeCreatedEventFilter = TypedEventFilter<ResolutionTypeCreatedEvent>;

export interface ResolutionUpdatedEventObject {
  from: string;
  resolutionId: BigNumber;
}
export type ResolutionUpdatedEvent = TypedEvent<[string, BigNumber], ResolutionUpdatedEventObject>;

export type ResolutionUpdatedEventFilter = TypedEventFilter<ResolutionUpdatedEvent>;

export interface ResolutionVotedEventObject {
  from: string;
  resolutionId: BigNumber;
  votingPower: BigNumber;
  isYes: boolean;
}
export type ResolutionVotedEvent = TypedEvent<[string, BigNumber, BigNumber, boolean], ResolutionVotedEventObject>;

export type ResolutionVotedEventFilter = TypedEventFilter<ResolutionVotedEvent>;

export interface ResolutionManagerV2Mock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResolutionManagerV2MockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createResolutionWithExclusion(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      excludedContributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[], string[]]>;

    getResolutionResult(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    getRoles(overrides?: CallOverrides): Promise<[string]>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isYes: boolean;
        hasVoted: boolean;
        votingPower: BigNumber;
      }
    >;

    initialize(
      roles: PromiseOrValue<string>,
      shareholderRegistry: PromiseOrValue<string>,
      governanceToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reinitialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        quorum: BigNumber;
        noticePeriod: BigNumber;
        votingPeriod: BigNumber;
        canBeNegative: boolean;
      }
    >;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        dataURI: string;
        resolutionTypeId: BigNumber;
        approveTimestamp: BigNumber;
        snapshotId: BigNumber;
        yesVotesTotal: BigNumber;
        isNegative: boolean;
        rejectionTimestamp: BigNumber;
        executionTimestamp: BigNumber;
        addressedContributor: string;
      }
    >;

    setGovernanceToken(
      governanceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addResolutionType(
    name: PromiseOrValue<string>,
    quorum: PromiseOrValue<BigNumberish>,
    noticePeriod: PromiseOrValue<BigNumberish>,
    votingPeriod: PromiseOrValue<BigNumberish>,
    canBeNegative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approveResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createResolution(
    dataURI: PromiseOrValue<string>,
    resolutionTypeId: PromiseOrValue<BigNumberish>,
    isNegative: PromiseOrValue<boolean>,
    executionTo: PromiseOrValue<string>[],
    executionData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createResolutionWithExclusion(
    dataURI: PromiseOrValue<string>,
    resolutionTypeId: PromiseOrValue<BigNumberish>,
    executionTo: PromiseOrValue<string>[],
    executionData: PromiseOrValue<BytesLike>[],
    excludedContributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  executeResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getExecutionDetails(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string[], string[]]>;

  getResolutionResult(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  getRoles(overrides?: CallOverrides): Promise<string>;

  getVoterVote(
    resolutionId: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isYes: boolean;
      hasVoted: boolean;
      votingPower: BigNumber;
    }
  >;

  initialize(
    roles: PromiseOrValue<string>,
    shareholderRegistry: PromiseOrValue<string>,
    governanceToken: PromiseOrValue<string>,
    voting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reinitialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rejectResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  resolutionTypes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean] & {
      name: string;
      quorum: BigNumber;
      noticePeriod: BigNumber;
      votingPeriod: BigNumber;
      canBeNegative: boolean;
    }
  >;

  resolutions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
      dataURI: string;
      resolutionTypeId: BigNumber;
      approveTimestamp: BigNumber;
      snapshotId: BigNumber;
      yesVotesTotal: BigNumber;
      isNegative: boolean;
      rejectionTimestamp: BigNumber;
      executionTimestamp: BigNumber;
      addressedContributor: string;
    }
  >;

  setGovernanceToken(
    governanceToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoles(
    roles: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setShareholderRegistry(
    shareholderRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVoting(
    voting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateResolution(
    resolutionId: PromiseOrValue<BigNumberish>,
    dataURI: PromiseOrValue<string>,
    resolutionTypeId: PromiseOrValue<BigNumberish>,
    isNegative: PromiseOrValue<boolean>,
    executionTo: PromiseOrValue<string>[],
    executionData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vote(
    resolutionId: PromiseOrValue<BigNumberish>,
    isYes: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    approveResolution(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createResolutionWithExclusion(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      excludedContributor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    executeResolution(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[], string[]]>;

    getResolutionResult(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    getRoles(overrides?: CallOverrides): Promise<string>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isYes: boolean;
        hasVoted: boolean;
        votingPower: BigNumber;
      }
    >;

    initialize(
      roles: PromiseOrValue<string>,
      shareholderRegistry: PromiseOrValue<string>,
      governanceToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reinitialize(overrides?: CallOverrides): Promise<void>;

    rejectResolution(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    resolutionTypes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean] & {
        name: string;
        quorum: BigNumber;
        noticePeriod: BigNumber;
        votingPeriod: BigNumber;
        canBeNegative: boolean;
      }
    >;

    resolutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber, string] & {
        dataURI: string;
        resolutionTypeId: BigNumber;
        approveTimestamp: BigNumber;
        snapshotId: BigNumber;
        yesVotesTotal: BigNumber;
        isNegative: boolean;
        rejectionTimestamp: BigNumber;
        executionTimestamp: BigNumber;
        addressedContributor: string;
      }
    >;

    setGovernanceToken(governanceToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoles(roles: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setShareholderRegistry(shareholderRegistry: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setVoting(voting: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "DelegateLostVotingPower(address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): DelegateLostVotingPowerEventFilter;
    DelegateLostVotingPower(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): DelegateLostVotingPowerEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ResolutionApproved(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionApprovedEventFilter;
    ResolutionApproved(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionApprovedEventFilter;

    "ResolutionCreated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionCreatedEventFilter;
    ResolutionCreated(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionCreatedEventFilter;

    "ResolutionExecuted(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionExecutedEventFilter;
    ResolutionExecuted(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionExecutedEventFilter;

    "ResolutionRejected(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionRejectedEventFilter;
    ResolutionRejected(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionRejectedEventFilter;

    "ResolutionTypeCreated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      typeIndex?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionTypeCreatedEventFilter;
    ResolutionTypeCreated(
      from?: PromiseOrValue<string> | null,
      typeIndex?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionTypeCreatedEventFilter;

    "ResolutionUpdated(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionUpdatedEventFilter;
    ResolutionUpdated(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
    ): ResolutionUpdatedEventFilter;

    "ResolutionVoted(address,uint256,uint256,bool)"(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      votingPower?: null,
      isYes?: null,
    ): ResolutionVotedEventFilter;
    ResolutionVoted(
      from?: PromiseOrValue<string> | null,
      resolutionId?: PromiseOrValue<BigNumberish> | null,
      votingPower?: null,
      isYes?: null,
    ): ResolutionVotedEventFilter;
  };

  estimateGas: {
    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createResolutionWithExclusion(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      excludedContributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getExecutionDetails(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getResolutionResult(resolutionId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoles(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      roles: PromiseOrValue<string>,
      shareholderRegistry: PromiseOrValue<string>,
      governanceToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reinitialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    resolutionTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    resolutions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setGovernanceToken(
      governanceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addResolutionType(
      name: PromiseOrValue<string>,
      quorum: PromiseOrValue<BigNumberish>,
      noticePeriod: PromiseOrValue<BigNumberish>,
      votingPeriod: PromiseOrValue<BigNumberish>,
      canBeNegative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approveResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createResolution(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createResolutionWithExclusion(
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      excludedContributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executeResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getExecutionDetails(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getResolutionResult(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterVote(
      resolutionId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      roles: PromiseOrValue<string>,
      shareholderRegistry: PromiseOrValue<string>,
      governanceToken: PromiseOrValue<string>,
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reinitialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rejectResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    resolutionTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolutions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernanceToken(
      governanceToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoles(
      roles: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setShareholderRegistry(
      shareholderRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVoting(
      voting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateResolution(
      resolutionId: PromiseOrValue<BigNumberish>,
      dataURI: PromiseOrValue<string>,
      resolutionTypeId: PromiseOrValue<BigNumberish>,
      isNegative: PromiseOrValue<boolean>,
      executionTo: PromiseOrValue<string>[],
      executionData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vote(
      resolutionId: PromiseOrValue<BigNumberish>,
      isYes: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
